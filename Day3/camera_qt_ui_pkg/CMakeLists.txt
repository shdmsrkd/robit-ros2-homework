cmake_minimum_required(VERSION 3.5)
project(camera_qt_ui_pkg)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_AUTOUIC_SEARCH_PATHS ${CMAKE_CURRENT_SOURCE_DIR}/ui)

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(Boost 1.71.0 REQUIRED COMPONENTS thread)
find_package(Qt5 COMPONENTS Widgets Core Gui Network REQUIRED)
find_package(cv_bridge REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(OpenCV REQUIRED)
find_package(image_transport REQUIRED)

# Qt 관련 파일들
file(GLOB PRO_UI_DIR RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} FOLLOW_SYMLINKS ui/mainwindow.ui)
file(GLOB PRO_INCLUDE_DIR RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} FOLLOW_SYMLINKS include/${PROJECT_NAME}/*.h include/${PROJECT_NAME}/*.hpp)
file(GLOB PRO_RESOURCE_DIR RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} FOLLOW_SYMLINKS resource/*.qrc)

qt5_wrap_ui(QT_UI_HPP ${PRO_UI_DIR})
qt5_wrap_cpp(QT_MOC_HPP ${PRO_INCLUDE_DIR})
qt5_add_resources(QT_RESOUCE_HPP ${PRO_RESOURCE_DIR})

include_directories(
  include/
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
  ${OpenCV_INCLUDE_DIRS}
  ${cv_bridge_INCLUDE_DIRS}
  ${sensor_msgs_INCLUDE_DIRS}
  ${image_transport_INCLUDE_DIRS}
)

# Qt GUI 실행 파일
add_executable(${PROJECT_NAME}
  src/main.cpp
  src/main_window.cpp
  src/qnode.cpp
  ${PRO_INCLUDE_DIR}
  ${QT_MOC_HPP}
  ${QT_RESOUCE_HPP}
  ${QT_UI_HPP}
)

ament_target_dependencies(${PROJECT_NAME}
  rclcpp
  Boost
  sensor_msgs
  cv_bridge
  image_transport
)

target_link_libraries(${PROJECT_NAME}
  Qt5::Widgets
  Qt5::Core
  Qt5::Gui
  Qt5::Network
  ${OpenCV_LIBS}
  ${cv_bridge_LIBRARIES}
)

# 이미지 subscriber 실행 파일
add_executable(image_subscriber
  src/image_subscriber.cpp
)

ament_target_dependencies(image_subscriber
  rclcpp
  sensor_msgs
  cv_bridge
  image_transport
)

target_link_libraries(image_subscriber
  ${OpenCV_LIBS}
  ${cv_bridge_LIBRARIES}
  ${image_transport_LIBRARIES}
)

install(TARGETS
  ${PROJECT_NAME}
  image_subscriber
  DESTINATION lib/${PROJECT_NAME}
)

install(DIRECTORY
  ui
  DESTINATION share/${PROJECT_NAME}
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
